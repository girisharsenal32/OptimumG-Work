using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GAF.Operators;
using GAF;
using MathNet.Spatial.Units;
using devDept.Geometry;
using devDept.Eyeshot;
using devDept.Eyeshot.Entities;

namespace Coding_Attempt_with_GUI
{
    public interface IOptimizer
    {

        #region --GENETIC ALGORITHM PROPERTIES--
        //--Genetic Algorithm Properties--

        /// <summary>
        /// Percentage of the Population which is going to be subject to Crossover
        /// </summary>
        double CrossOverProbability { get; set; }

        /// <summary>
        /// Crossover Operator which takes the <see cref="CrossOverProbability"/> as a argument and is added to the <see cref="GA"/> during its initialization
        /// </summary>
        Crossover Crossovers { get; set; }

        /// <summary>
        /// Percentage of the Population which is going to be subject to Random Mutation
        /// </summary>
        double MutationProbability { get; set; }

        /// <summary>
        /// Mutate Operator which takes the <see cref="MutationProbability"/> as an argument and is added to the <see cref="GA"/> during it initialization
        /// </summary>
        BinaryMutate Mutations { get; set; }

        /// <summary>
        /// Percentage of the population which is going to be treated as Elite without an modifications to the Genes
        /// </summary>
        int ElitePercentage { get; set; }

        /// <summary>
        /// Elite operator which takes the <see cref="ElitePercentage"/> as an argument and is added to the <see cref="GA"/> during its initialization
        /// </summary>
        Elite Elites { get; set; }

        /// <summary>
        /// Size of the Population
        /// </summary>
        int PopulationSize { get; set; }

        /// <summary>
        /// Population which will be passed to the <see cref="GA"/> during its initialization
        /// </summary>
        Population Population { get; set; }

        /// <summary>
        /// <para>Chromosome Length of the <see cref="Population"/></para>
        /// <para>Decided based on 2 things: The number of Genes and the bit size required for each Gene</para>
        /// <para>https://gaframework.org/wiki/index.php/How_to_Encode_Parameters for more information</para>
        /// </summary>
        int ChromosomeLength { get; set; }

        /// <summary>
        /// The <see cref="GeneticAlgorithm"/>
        /// </summary>
        GeneticAlgorithm GA { get; set; }

        /// <summary>
        /// <para><see cref="Delegate"/> which points to the local Fitness Function</para>
        /// <para>In this case the <see cref="EvaluateFitnessCurve(Chromosome)"/></para>
        /// </summary>
       FitnessFunction EvaluateFitnessOfGeneticAlforithm { get; set; }

        /// <summary>
        /// <para><see cref="Delegate"/> which points to the Terminate Function</para>
        /// <para>In this case the <see cref="TerminateAlgorithm(Population, int, long)"/></para>
        /// </summary>
        TerminateFunction Terminate { get; set; }

        /// <summary>
        /// <para>---IMPORTANT---</para>
        /// <para>This is the <see cref="Dictionary{String, Double}"/> which holds the new values of the <see cref="AdjustmentTools"/> generated BY THE OPTIMIZER</para>
        /// </summary>
        Dictionary<String, double> Opt_AdjToolValues { get; set; }

        /// <summary>
        /// Variable indicating the number of Generations before Termination
        /// </summary>
        int No_Generations { get; set; }

        /// <summary>
        /// Maximium Error in a particular Generation
        /// </summary>
        double MaximumErrorOfGeneration { get; set; }

        /// <summary>
        /// <para>Variable to keep track of which solution is currently being evaluated</para>
        /// <para>---IMPORTANT--- This variable is crucial as it also aids in populating the <see cref="Ga_Values"/> <see cref="DataTable"/> </para>
        /// </summary>
        int SolutionCounter { get; set; }
        #endregion


        #region --Kinematic Solvers--
        /// <summary>
        /// Object of the <see cref="DoubleWishboneKinematicsSolver"/> Class used for all the Kinematics computations
        /// </summary>
        DoubleWishboneKinematicsSolver DWSolver { get; set; }/* = new DoubleWishboneKinematicsSolver();*/

        /// <summary>
        /// Object of the <see cref="McPhersonKinematicsSolver"/> Class used for McPherson Kinematic Computaions
        /// </summary>
        McPhersonKinematicsSolver McPSolver { get; set; } /*= new McPhersonKinematicsSolver();*/
        #endregion


        #region --VEHICLE & SUSPENSION PARAMETERS--

        //--Vehicle and Chassis Obect--

        /// <summary>
        /// The object of the Vehicle itself which is calling this class
        /// </summary>
        Vehicle Vehicle { get; set; }

        /// <summary>
        /// <para>Chassis of the corner of the Vehicle calling this class</para>
        /// <para>Kept independant like the <see cref="Vehicle"/> object because it connects all the 4 corners. So it doesn't make sense to keep this in any other CLass</para>
        /// </summary>
        Chassis Chassis { get; set; }

        #endregion

    }
}
